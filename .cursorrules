# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When implementing UI features, prioritize validation for better user experience
- Include confirmation dialogs for destructive actions like deletion
- Use pagination for lists that may grow large over time
- Add search and filtering functionality to make data management more efficient
- For database delete operations with foreign key relationships, use a robust transaction approach with error handling
- Always check database responses and use explicit selects after delete operations to verify success
- Invalidate cache and force state refresh after critical operations like deletion to ensure UI consistency 
- Add detailed logging for database operations to aid in debugging production issues
- Implement optimistic UI updates for better user experience (update UI first, then try database operations)
- When handling deletion operations, always update local cache/state immediately even if the backend operation fails
- Use error boundaries in UI components to prevent entire application crashes from localized errors
- Admin dashboard doesn't need caching or saving to IndexedDB - fetch fresh data each time to ensure admins always see the latest information
- When mapping database user roles, ensure all possible role values ('user', 'admin', 'super-admin') are properly handled in mapDbUserToUser function
- When dealing with type mismatches, check imports to ensure you're using the correct type definition
- Add detailed debug logging in authentication flows to track role changes and permissions
- For user interface components handling different user roles, implement role-specific permissions checks before allowing actions
- When updating user interfaces, add refresh functionality for users to manually trigger data refetching
- In authentication services, ensure type definitions are consistent across the application to prevent bugs
- For functions that map database entities to application entities, include proper type checking and role validation
- Add conditional action buttons in admin interfaces based on user role (e.g., can't modify super-admin accounts)

## PWA Development

- When using PWA features with Vite and TypeScript, use proper path aliases (@/utils/...) instead of relative imports to avoid development server issues
- Implement activity timestamps in service workers to track lifespan and prevent termination
- Add periodic cache cleanup to prevent stale data accumulation during extended offline periods
- Implement a robust keep-alive mechanism with backup strategies for service worker reliability
- Configure proper TypeScript settings for module resolution in projects with multiple tsconfig files
- Add health checks for service workers when returning from extended offline periods
- Use a metadata cache to store service worker state that persists across restarts

# Scratchpad

## Current Task: Fix Super Admin Login Redirection Issue

The problem: When logging in with super-admin credentials, the user is briefly redirected to the super admin dashboard but then redirected back to the regular user interface.

Analysis:
- Added SuperAdminDashboard component to App.tsx and updated routing logic
- Updated User type definition to include 'super-admin' as a possible role value
- Found potential issues in the authentication state management:
  1. In mapDbUserToUser function, role was being cast as only 'user' | 'admin', not 'super-admin'
  2. Multiple subscribers to auth state changes might be causing conflicts
  3. Session refresh logic might not preserve the super-admin role

Added debugging:
- Added debug logs in useAuth.ts to track the user's role during authentication
- Added debug logs in auth.service.ts to track database user role during mapping

To fix the issue:
- Updated mapDbUserToUser to properly handle 'super-admin' role by using conditional logic
- Added logs to monitor role changes between login and subsequent refreshes

[X] Identify the issue with super-admin redirection
[X] Add missing SuperAdminDashboard import and route in App.tsx
[X] Update User type definitions to include 'super-admin' role 
[X] Debug and update the auth service to properly handle the super-admin role
[X] Test the fix with the superadmin@nesttask.com account
[X] Update the AdminManagement component to properly display all admin users

Task completed âœ…

Important fixes:
1. Modified mapDbUserToUser function to correctly cast 'super-admin' role
2. Fixed the User type in auth.ts to explicitly include 'super-admin' role
3. Updated the phone property handling in the User interface
4. Enhanced AdminManagement component with refresh functionality and better UI
5. Fixed interface mismatches between different User type definitions in the codebase

All changes have been tested and the super-admin login now properly redirects to the Super Admin Dashboard.

## Fixed PWA Offline Support Issue

Task: Fix the issue where the PWA interface doesn't load properly after being offline for more than an hour.

[X] Identified and fixed the issue with offlineStorage.js import in main.tsx
[X] Added proper path aliases in vite.config.ts for better module resolution
[X] Updated TypeScript configuration for better module handling
[X] Enhanced service worker with activity timestamps and keep-alive mechanisms
[X] Added cleanup mechanisms for stale cache data
[X] Implemented self-healing for service workers during extended offline periods
[X] Fixed build configuration for better production reliability

Key changes:
1. Fixed import issue in main.tsx by using proper path aliases
2. Added enhanced keep-alive mechanism in the service worker
3. Implemented cache cleanup for stale data
4. Added service worker self-healing capabilities
5. Updated TypeScript configuration for proper module resolution

Task completed âœ…